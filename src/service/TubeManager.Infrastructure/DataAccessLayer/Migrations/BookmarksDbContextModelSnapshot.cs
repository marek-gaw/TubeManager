// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using TubeManager.Infrastructure.DataAccessLayer;

#nullable disable

namespace TubeManager.Infrastructure.DataAccessLayer.Migrations
{
    [DbContext(typeof(BookmarksDbContext))]
    partial class BookmarksDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("TubeManager.Core.Entities.Bookmark", b =>
                {
                    b.Property<Guid?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CategoryId")
                        .HasColumnType("uuid");

                    b.Property<string>("Channel")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ThumbnailUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("VideoUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Bookmarks", (string)null);
                });

            modelBuilder.Entity("TubeManager.Core.Entities.BookmarkTag", b =>
                {
                    b.Property<Guid>("BookmarkId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TagId")
                        .HasColumnType("uuid");

                    b.HasKey("BookmarkId", "TagId");

                    b.HasIndex("TagId");

                    b.ToTable("BookmarkTag", (string)null);
                });

            modelBuilder.Entity("TubeManager.Core.Entities.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Categories", (string)null);
                });

            modelBuilder.Entity("TubeManager.Core.Entities.Channel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ChannelId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Channels", (string)null);
                });

            modelBuilder.Entity("TubeManager.Core.Entities.ImportInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("BookmarkId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("ImportTimestamp")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("ImportInfos", (string)null);
                });

            modelBuilder.Entity("TubeManager.Core.Entities.Tag", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Tags", (string)null);
                });

            modelBuilder.Entity("TubeManager.Core.Entities.Bookmark", b =>
                {
                    b.HasOne("TubeManager.Core.Entities.Category", "Category")
                        .WithMany("Bookmarks")
                        .HasForeignKey("CategoryId");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("TubeManager.Core.Entities.BookmarkTag", b =>
                {
                    b.HasOne("TubeManager.Core.Entities.Bookmark", "Bookmark")
                        .WithMany("BookmarkTags")
                        .HasForeignKey("BookmarkId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TubeManager.Core.Entities.Tag", "Tag")
                        .WithMany("BookmarkTags")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Bookmark");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("TubeManager.Core.Entities.Bookmark", b =>
                {
                    b.Navigation("BookmarkTags");
                });

            modelBuilder.Entity("TubeManager.Core.Entities.Category", b =>
                {
                    b.Navigation("Bookmarks");
                });

            modelBuilder.Entity("TubeManager.Core.Entities.Tag", b =>
                {
                    b.Navigation("BookmarkTags");
                });
#pragma warning restore 612, 618
        }
    }
}
